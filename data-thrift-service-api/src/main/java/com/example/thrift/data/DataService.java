/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.thrift.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-24")
public class DataService {

  public interface Iface {

    public void addOneData(DataInfo dataInfo) throws org.apache.thrift.TException;

    public java.util.List<DataInfo> findAllData(java.lang.String identify) throws org.apache.thrift.TException;

    public java.util.List<DataInfo> toTimeData(java.lang.String identify, java.lang.String datetime) throws org.apache.thrift.TException;

    public java.util.List<DataInfo> fromToTimeData(java.lang.String identify, java.lang.String fromTime, java.lang.String toTime) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addOneData(DataInfo dataInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void findAllData(java.lang.String identify, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler) throws org.apache.thrift.TException;

    public void toTimeData(java.lang.String identify, java.lang.String datetime, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler) throws org.apache.thrift.TException;

    public void fromToTimeData(java.lang.String identify, java.lang.String fromTime, java.lang.String toTime, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addOneData(DataInfo dataInfo) throws org.apache.thrift.TException
    {
      send_addOneData(dataInfo);
      recv_addOneData();
    }

    public void send_addOneData(DataInfo dataInfo) throws org.apache.thrift.TException
    {
      addOneData_args args = new addOneData_args();
      args.setDataInfo(dataInfo);
      sendBase("addOneData", args);
    }

    public void recv_addOneData() throws org.apache.thrift.TException
    {
      addOneData_result result = new addOneData_result();
      receiveBase(result, "addOneData");
      return;
    }

    public java.util.List<DataInfo> findAllData(java.lang.String identify) throws org.apache.thrift.TException
    {
      send_findAllData(identify);
      return recv_findAllData();
    }

    public void send_findAllData(java.lang.String identify) throws org.apache.thrift.TException
    {
      findAllData_args args = new findAllData_args();
      args.setIdentify(identify);
      sendBase("findAllData", args);
    }

    public java.util.List<DataInfo> recv_findAllData() throws org.apache.thrift.TException
    {
      findAllData_result result = new findAllData_result();
      receiveBase(result, "findAllData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllData failed: unknown result");
    }

    public java.util.List<DataInfo> toTimeData(java.lang.String identify, java.lang.String datetime) throws org.apache.thrift.TException
    {
      send_toTimeData(identify, datetime);
      return recv_toTimeData();
    }

    public void send_toTimeData(java.lang.String identify, java.lang.String datetime) throws org.apache.thrift.TException
    {
      toTimeData_args args = new toTimeData_args();
      args.setIdentify(identify);
      args.setDatetime(datetime);
      sendBase("toTimeData", args);
    }

    public java.util.List<DataInfo> recv_toTimeData() throws org.apache.thrift.TException
    {
      toTimeData_result result = new toTimeData_result();
      receiveBase(result, "toTimeData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "toTimeData failed: unknown result");
    }

    public java.util.List<DataInfo> fromToTimeData(java.lang.String identify, java.lang.String fromTime, java.lang.String toTime) throws org.apache.thrift.TException
    {
      send_fromToTimeData(identify, fromTime, toTime);
      return recv_fromToTimeData();
    }

    public void send_fromToTimeData(java.lang.String identify, java.lang.String fromTime, java.lang.String toTime) throws org.apache.thrift.TException
    {
      fromToTimeData_args args = new fromToTimeData_args();
      args.setIdentify(identify);
      args.setFromTime(fromTime);
      args.setToTime(toTime);
      sendBase("fromToTimeData", args);
    }

    public java.util.List<DataInfo> recv_fromToTimeData() throws org.apache.thrift.TException
    {
      fromToTimeData_result result = new fromToTimeData_result();
      receiveBase(result, "fromToTimeData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fromToTimeData failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addOneData(DataInfo dataInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOneData_call method_call = new addOneData_call(dataInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOneData_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private DataInfo dataInfo;
      public addOneData_call(DataInfo dataInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataInfo = dataInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOneData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOneData_args args = new addOneData_args();
        args.setDataInfo(dataInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void findAllData(java.lang.String identify, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllData_call method_call = new findAllData_call(identify, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllData_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<DataInfo>> {
      private java.lang.String identify;
      public findAllData_call(java.lang.String identify, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.identify = identify;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllData_args args = new findAllData_args();
        args.setIdentify(identify);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<DataInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllData();
      }
    }

    public void toTimeData(java.lang.String identify, java.lang.String datetime, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      toTimeData_call method_call = new toTimeData_call(identify, datetime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class toTimeData_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<DataInfo>> {
      private java.lang.String identify;
      private java.lang.String datetime;
      public toTimeData_call(java.lang.String identify, java.lang.String datetime, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.identify = identify;
        this.datetime = datetime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("toTimeData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        toTimeData_args args = new toTimeData_args();
        args.setIdentify(identify);
        args.setDatetime(datetime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<DataInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_toTimeData();
      }
    }

    public void fromToTimeData(java.lang.String identify, java.lang.String fromTime, java.lang.String toTime, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fromToTimeData_call method_call = new fromToTimeData_call(identify, fromTime, toTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fromToTimeData_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<DataInfo>> {
      private java.lang.String identify;
      private java.lang.String fromTime;
      private java.lang.String toTime;
      public fromToTimeData_call(java.lang.String identify, java.lang.String fromTime, java.lang.String toTime, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.identify = identify;
        this.fromTime = fromTime;
        this.toTime = toTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fromToTimeData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fromToTimeData_args args = new fromToTimeData_args();
        args.setIdentify(identify);
        args.setFromTime(fromTime);
        args.setToTime(toTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<DataInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fromToTimeData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addOneData", new addOneData());
      processMap.put("findAllData", new findAllData());
      processMap.put("toTimeData", new toTimeData());
      processMap.put("fromToTimeData", new fromToTimeData());
      return processMap;
    }

    public static class addOneData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOneData_args> {
      public addOneData() {
        super("addOneData");
      }

      public addOneData_args getEmptyArgsInstance() {
        return new addOneData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addOneData_result getResult(I iface, addOneData_args args) throws org.apache.thrift.TException {
        addOneData_result result = new addOneData_result();
        iface.addOneData(args.dataInfo);
        return result;
      }
    }

    public static class findAllData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllData_args> {
      public findAllData() {
        super("findAllData");
      }

      public findAllData_args getEmptyArgsInstance() {
        return new findAllData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findAllData_result getResult(I iface, findAllData_args args) throws org.apache.thrift.TException {
        findAllData_result result = new findAllData_result();
        result.success = iface.findAllData(args.identify);
        return result;
      }
    }

    public static class toTimeData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, toTimeData_args> {
      public toTimeData() {
        super("toTimeData");
      }

      public toTimeData_args getEmptyArgsInstance() {
        return new toTimeData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public toTimeData_result getResult(I iface, toTimeData_args args) throws org.apache.thrift.TException {
        toTimeData_result result = new toTimeData_result();
        result.success = iface.toTimeData(args.identify, args.datetime);
        return result;
      }
    }

    public static class fromToTimeData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fromToTimeData_args> {
      public fromToTimeData() {
        super("fromToTimeData");
      }

      public fromToTimeData_args getEmptyArgsInstance() {
        return new fromToTimeData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public fromToTimeData_result getResult(I iface, fromToTimeData_args args) throws org.apache.thrift.TException {
        fromToTimeData_result result = new fromToTimeData_result();
        result.success = iface.fromToTimeData(args.identify, args.fromTime, args.toTime);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addOneData", new addOneData());
      processMap.put("findAllData", new findAllData());
      processMap.put("toTimeData", new toTimeData());
      processMap.put("fromToTimeData", new fromToTimeData());
      return processMap;
    }

    public static class addOneData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOneData_args, Void> {
      public addOneData() {
        super("addOneData");
      }

      public addOneData_args getEmptyArgsInstance() {
        return new addOneData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addOneData_result result = new addOneData_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addOneData_result result = new addOneData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOneData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addOneData(args.dataInfo,resultHandler);
      }
    }

    public static class findAllData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllData_args, java.util.List<DataInfo>> {
      public findAllData() {
        super("findAllData");
      }

      public findAllData_args getEmptyArgsInstance() {
        return new findAllData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>>() { 
          public void onComplete(java.util.List<DataInfo> o) {
            findAllData_result result = new findAllData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findAllData_result result = new findAllData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllData_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.findAllData(args.identify,resultHandler);
      }
    }

    public static class toTimeData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, toTimeData_args, java.util.List<DataInfo>> {
      public toTimeData() {
        super("toTimeData");
      }

      public toTimeData_args getEmptyArgsInstance() {
        return new toTimeData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>>() { 
          public void onComplete(java.util.List<DataInfo> o) {
            toTimeData_result result = new toTimeData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            toTimeData_result result = new toTimeData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, toTimeData_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.toTimeData(args.identify, args.datetime,resultHandler);
      }
    }

    public static class fromToTimeData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fromToTimeData_args, java.util.List<DataInfo>> {
      public fromToTimeData() {
        super("fromToTimeData");
      }

      public fromToTimeData_args getEmptyArgsInstance() {
        return new fromToTimeData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>>() { 
          public void onComplete(java.util.List<DataInfo> o) {
            fromToTimeData_result result = new fromToTimeData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fromToTimeData_result result = new fromToTimeData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fromToTimeData_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DataInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.fromToTimeData(args.identify, args.fromTime, args.toTime,resultHandler);
      }
    }

  }

  public static class addOneData_args implements org.apache.thrift.TBase<addOneData_args, addOneData_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOneData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOneData_args");

    private static final org.apache.thrift.protocol.TField DATA_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("dataInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addOneData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addOneData_argsTupleSchemeFactory();

    public DataInfo dataInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_INFO((short)1, "dataInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_INFO
            return DATA_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_INFO, new org.apache.thrift.meta_data.FieldMetaData("dataInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOneData_args.class, metaDataMap);
    }

    public addOneData_args() {
    }

    public addOneData_args(
      DataInfo dataInfo)
    {
      this();
      this.dataInfo = dataInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOneData_args(addOneData_args other) {
      if (other.isSetDataInfo()) {
        this.dataInfo = new DataInfo(other.dataInfo);
      }
    }

    public addOneData_args deepCopy() {
      return new addOneData_args(this);
    }

    @Override
    public void clear() {
      this.dataInfo = null;
    }

    public DataInfo getDataInfo() {
      return this.dataInfo;
    }

    public addOneData_args setDataInfo(DataInfo dataInfo) {
      this.dataInfo = dataInfo;
      return this;
    }

    public void unsetDataInfo() {
      this.dataInfo = null;
    }

    /** Returns true if field dataInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDataInfo() {
      return this.dataInfo != null;
    }

    public void setDataInfoIsSet(boolean value) {
      if (!value) {
        this.dataInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DATA_INFO:
        if (value == null) {
          unsetDataInfo();
        } else {
          setDataInfo((DataInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_INFO:
        return getDataInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DATA_INFO:
        return isSetDataInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addOneData_args)
        return this.equals((addOneData_args)that);
      return false;
    }

    public boolean equals(addOneData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dataInfo = true && this.isSetDataInfo();
      boolean that_present_dataInfo = true && that.isSetDataInfo();
      if (this_present_dataInfo || that_present_dataInfo) {
        if (!(this_present_dataInfo && that_present_dataInfo))
          return false;
        if (!this.dataInfo.equals(that.dataInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDataInfo()) ? 131071 : 524287);
      if (isSetDataInfo())
        hashCode = hashCode * 8191 + dataInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addOneData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDataInfo()).compareTo(other.isSetDataInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataInfo, other.dataInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addOneData_args(");
      boolean first = true;

      sb.append("dataInfo:");
      if (this.dataInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.dataInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dataInfo != null) {
        dataInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOneData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addOneData_argsStandardScheme getScheme() {
        return new addOneData_argsStandardScheme();
      }
    }

    private static class addOneData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addOneData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOneData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataInfo = new DataInfo();
                struct.dataInfo.read(iprot);
                struct.setDataInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOneData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataInfo != null) {
          oprot.writeFieldBegin(DATA_INFO_FIELD_DESC);
          struct.dataInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOneData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addOneData_argsTupleScheme getScheme() {
        return new addOneData_argsTupleScheme();
      }
    }

    private static class addOneData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addOneData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOneData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDataInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDataInfo()) {
          struct.dataInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOneData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dataInfo = new DataInfo();
          struct.dataInfo.read(iprot);
          struct.setDataInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addOneData_result implements org.apache.thrift.TBase<addOneData_result, addOneData_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOneData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOneData_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addOneData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addOneData_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOneData_result.class, metaDataMap);
    }

    public addOneData_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOneData_result(addOneData_result other) {
    }

    public addOneData_result deepCopy() {
      return new addOneData_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addOneData_result)
        return this.equals((addOneData_result)that);
      return false;
    }

    public boolean equals(addOneData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addOneData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addOneData_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOneData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addOneData_resultStandardScheme getScheme() {
        return new addOneData_resultStandardScheme();
      }
    }

    private static class addOneData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addOneData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOneData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOneData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOneData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addOneData_resultTupleScheme getScheme() {
        return new addOneData_resultTupleScheme();
      }
    }

    private static class addOneData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addOneData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOneData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOneData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAllData_args implements org.apache.thrift.TBase<findAllData_args, findAllData_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllData_args");

    private static final org.apache.thrift.protocol.TField IDENTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("identify", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAllData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAllData_argsTupleSchemeFactory();

    public java.lang.String identify; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDENTIFY((short)1, "identify");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDENTIFY
            return IDENTIFY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDENTIFY, new org.apache.thrift.meta_data.FieldMetaData("identify", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllData_args.class, metaDataMap);
    }

    public findAllData_args() {
    }

    public findAllData_args(
      java.lang.String identify)
    {
      this();
      this.identify = identify;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllData_args(findAllData_args other) {
      if (other.isSetIdentify()) {
        this.identify = other.identify;
      }
    }

    public findAllData_args deepCopy() {
      return new findAllData_args(this);
    }

    @Override
    public void clear() {
      this.identify = null;
    }

    public java.lang.String getIdentify() {
      return this.identify;
    }

    public findAllData_args setIdentify(java.lang.String identify) {
      this.identify = identify;
      return this;
    }

    public void unsetIdentify() {
      this.identify = null;
    }

    /** Returns true if field identify is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentify() {
      return this.identify != null;
    }

    public void setIdentifyIsSet(boolean value) {
      if (!value) {
        this.identify = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IDENTIFY:
        if (value == null) {
          unsetIdentify();
        } else {
          setIdentify((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IDENTIFY:
        return getIdentify();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IDENTIFY:
        return isSetIdentify();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllData_args)
        return this.equals((findAllData_args)that);
      return false;
    }

    public boolean equals(findAllData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_identify = true && this.isSetIdentify();
      boolean that_present_identify = true && that.isSetIdentify();
      if (this_present_identify || that_present_identify) {
        if (!(this_present_identify && that_present_identify))
          return false;
        if (!this.identify.equals(that.identify))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIdentify()) ? 131071 : 524287);
      if (isSetIdentify())
        hashCode = hashCode * 8191 + identify.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAllData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdentify()).compareTo(other.isSetIdentify());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentify()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identify, other.identify);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAllData_args(");
      boolean first = true;

      sb.append("identify:");
      if (this.identify == null) {
        sb.append("null");
      } else {
        sb.append(this.identify);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllData_argsStandardScheme getScheme() {
        return new findAllData_argsStandardScheme();
      }
    }

    private static class findAllData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAllData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDENTIFY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identify = iprot.readString();
                struct.setIdentifyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.identify != null) {
          oprot.writeFieldBegin(IDENTIFY_FIELD_DESC);
          oprot.writeString(struct.identify);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllData_argsTupleScheme getScheme() {
        return new findAllData_argsTupleScheme();
      }
    }

    private static class findAllData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAllData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdentify()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdentify()) {
          oprot.writeString(struct.identify);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.identify = iprot.readString();
          struct.setIdentifyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAllData_result implements org.apache.thrift.TBase<findAllData_result, findAllData_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAllData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAllData_resultTupleSchemeFactory();

    public java.util.List<DataInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllData_result.class, metaDataMap);
    }

    public findAllData_result() {
    }

    public findAllData_result(
      java.util.List<DataInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllData_result(findAllData_result other) {
      if (other.isSetSuccess()) {
        java.util.List<DataInfo> __this__success = new java.util.ArrayList<DataInfo>(other.success.size());
        for (DataInfo other_element : other.success) {
          __this__success.add(new DataInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllData_result deepCopy() {
      return new findAllData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DataInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DataInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<DataInfo>();
      }
      this.success.add(elem);
    }

    public java.util.List<DataInfo> getSuccess() {
      return this.success;
    }

    public findAllData_result setSuccess(java.util.List<DataInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<DataInfo>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllData_result)
        return this.equals((findAllData_result)that);
      return false;
    }

    public boolean equals(findAllData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAllData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAllData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllData_resultStandardScheme getScheme() {
        return new findAllData_resultStandardScheme();
      }
    }

    private static class findAllData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAllData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<DataInfo>(_list0.size);
                  DataInfo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new DataInfo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DataInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllData_resultTupleScheme getScheme() {
        return new findAllData_resultTupleScheme();
      }
    }

    private static class findAllData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAllData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DataInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<DataInfo>(_list5.size);
            DataInfo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new DataInfo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class toTimeData_args implements org.apache.thrift.TBase<toTimeData_args, toTimeData_args._Fields>, java.io.Serializable, Cloneable, Comparable<toTimeData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toTimeData_args");

    private static final org.apache.thrift.protocol.TField IDENTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("identify", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("datetime", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new toTimeData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new toTimeData_argsTupleSchemeFactory();

    public java.lang.String identify; // required
    public java.lang.String datetime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDENTIFY((short)1, "identify"),
      DATETIME((short)2, "datetime");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDENTIFY
            return IDENTIFY;
          case 2: // DATETIME
            return DATETIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDENTIFY, new org.apache.thrift.meta_data.FieldMetaData("identify", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATETIME, new org.apache.thrift.meta_data.FieldMetaData("datetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toTimeData_args.class, metaDataMap);
    }

    public toTimeData_args() {
    }

    public toTimeData_args(
      java.lang.String identify,
      java.lang.String datetime)
    {
      this();
      this.identify = identify;
      this.datetime = datetime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public toTimeData_args(toTimeData_args other) {
      if (other.isSetIdentify()) {
        this.identify = other.identify;
      }
      if (other.isSetDatetime()) {
        this.datetime = other.datetime;
      }
    }

    public toTimeData_args deepCopy() {
      return new toTimeData_args(this);
    }

    @Override
    public void clear() {
      this.identify = null;
      this.datetime = null;
    }

    public java.lang.String getIdentify() {
      return this.identify;
    }

    public toTimeData_args setIdentify(java.lang.String identify) {
      this.identify = identify;
      return this;
    }

    public void unsetIdentify() {
      this.identify = null;
    }

    /** Returns true if field identify is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentify() {
      return this.identify != null;
    }

    public void setIdentifyIsSet(boolean value) {
      if (!value) {
        this.identify = null;
      }
    }

    public java.lang.String getDatetime() {
      return this.datetime;
    }

    public toTimeData_args setDatetime(java.lang.String datetime) {
      this.datetime = datetime;
      return this;
    }

    public void unsetDatetime() {
      this.datetime = null;
    }

    /** Returns true if field datetime is set (has been assigned a value) and false otherwise */
    public boolean isSetDatetime() {
      return this.datetime != null;
    }

    public void setDatetimeIsSet(boolean value) {
      if (!value) {
        this.datetime = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IDENTIFY:
        if (value == null) {
          unsetIdentify();
        } else {
          setIdentify((java.lang.String)value);
        }
        break;

      case DATETIME:
        if (value == null) {
          unsetDatetime();
        } else {
          setDatetime((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IDENTIFY:
        return getIdentify();

      case DATETIME:
        return getDatetime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IDENTIFY:
        return isSetIdentify();
      case DATETIME:
        return isSetDatetime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof toTimeData_args)
        return this.equals((toTimeData_args)that);
      return false;
    }

    public boolean equals(toTimeData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_identify = true && this.isSetIdentify();
      boolean that_present_identify = true && that.isSetIdentify();
      if (this_present_identify || that_present_identify) {
        if (!(this_present_identify && that_present_identify))
          return false;
        if (!this.identify.equals(that.identify))
          return false;
      }

      boolean this_present_datetime = true && this.isSetDatetime();
      boolean that_present_datetime = true && that.isSetDatetime();
      if (this_present_datetime || that_present_datetime) {
        if (!(this_present_datetime && that_present_datetime))
          return false;
        if (!this.datetime.equals(that.datetime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIdentify()) ? 131071 : 524287);
      if (isSetIdentify())
        hashCode = hashCode * 8191 + identify.hashCode();

      hashCode = hashCode * 8191 + ((isSetDatetime()) ? 131071 : 524287);
      if (isSetDatetime())
        hashCode = hashCode * 8191 + datetime.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(toTimeData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdentify()).compareTo(other.isSetIdentify());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentify()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identify, other.identify);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDatetime()).compareTo(other.isSetDatetime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatetime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datetime, other.datetime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("toTimeData_args(");
      boolean first = true;

      sb.append("identify:");
      if (this.identify == null) {
        sb.append("null");
      } else {
        sb.append(this.identify);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("datetime:");
      if (this.datetime == null) {
        sb.append("null");
      } else {
        sb.append(this.datetime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class toTimeData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toTimeData_argsStandardScheme getScheme() {
        return new toTimeData_argsStandardScheme();
      }
    }

    private static class toTimeData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<toTimeData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, toTimeData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDENTIFY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identify = iprot.readString();
                struct.setIdentifyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATETIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datetime = iprot.readString();
                struct.setDatetimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, toTimeData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.identify != null) {
          oprot.writeFieldBegin(IDENTIFY_FIELD_DESC);
          oprot.writeString(struct.identify);
          oprot.writeFieldEnd();
        }
        if (struct.datetime != null) {
          oprot.writeFieldBegin(DATETIME_FIELD_DESC);
          oprot.writeString(struct.datetime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class toTimeData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toTimeData_argsTupleScheme getScheme() {
        return new toTimeData_argsTupleScheme();
      }
    }

    private static class toTimeData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<toTimeData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, toTimeData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdentify()) {
          optionals.set(0);
        }
        if (struct.isSetDatetime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIdentify()) {
          oprot.writeString(struct.identify);
        }
        if (struct.isSetDatetime()) {
          oprot.writeString(struct.datetime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, toTimeData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.identify = iprot.readString();
          struct.setIdentifyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.datetime = iprot.readString();
          struct.setDatetimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class toTimeData_result implements org.apache.thrift.TBase<toTimeData_result, toTimeData_result._Fields>, java.io.Serializable, Cloneable, Comparable<toTimeData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toTimeData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new toTimeData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new toTimeData_resultTupleSchemeFactory();

    public java.util.List<DataInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toTimeData_result.class, metaDataMap);
    }

    public toTimeData_result() {
    }

    public toTimeData_result(
      java.util.List<DataInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public toTimeData_result(toTimeData_result other) {
      if (other.isSetSuccess()) {
        java.util.List<DataInfo> __this__success = new java.util.ArrayList<DataInfo>(other.success.size());
        for (DataInfo other_element : other.success) {
          __this__success.add(new DataInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public toTimeData_result deepCopy() {
      return new toTimeData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DataInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DataInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<DataInfo>();
      }
      this.success.add(elem);
    }

    public java.util.List<DataInfo> getSuccess() {
      return this.success;
    }

    public toTimeData_result setSuccess(java.util.List<DataInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<DataInfo>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof toTimeData_result)
        return this.equals((toTimeData_result)that);
      return false;
    }

    public boolean equals(toTimeData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(toTimeData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("toTimeData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class toTimeData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toTimeData_resultStandardScheme getScheme() {
        return new toTimeData_resultStandardScheme();
      }
    }

    private static class toTimeData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<toTimeData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, toTimeData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<DataInfo>(_list8.size);
                  DataInfo _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new DataInfo();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, toTimeData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DataInfo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class toTimeData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toTimeData_resultTupleScheme getScheme() {
        return new toTimeData_resultTupleScheme();
      }
    }

    private static class toTimeData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<toTimeData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, toTimeData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DataInfo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, toTimeData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<DataInfo>(_list13.size);
            DataInfo _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new DataInfo();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fromToTimeData_args implements org.apache.thrift.TBase<fromToTimeData_args, fromToTimeData_args._Fields>, java.io.Serializable, Cloneable, Comparable<fromToTimeData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fromToTimeData_args");

    private static final org.apache.thrift.protocol.TField IDENTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("identify", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTime", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TO_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("toTime", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fromToTimeData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fromToTimeData_argsTupleSchemeFactory();

    public java.lang.String identify; // required
    public java.lang.String fromTime; // required
    public java.lang.String toTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDENTIFY((short)1, "identify"),
      FROM_TIME((short)2, "fromTime"),
      TO_TIME((short)3, "toTime");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDENTIFY
            return IDENTIFY;
          case 2: // FROM_TIME
            return FROM_TIME;
          case 3: // TO_TIME
            return TO_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDENTIFY, new org.apache.thrift.meta_data.FieldMetaData("identify", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FROM_TIME, new org.apache.thrift.meta_data.FieldMetaData("fromTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TO_TIME, new org.apache.thrift.meta_data.FieldMetaData("toTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fromToTimeData_args.class, metaDataMap);
    }

    public fromToTimeData_args() {
    }

    public fromToTimeData_args(
      java.lang.String identify,
      java.lang.String fromTime,
      java.lang.String toTime)
    {
      this();
      this.identify = identify;
      this.fromTime = fromTime;
      this.toTime = toTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fromToTimeData_args(fromToTimeData_args other) {
      if (other.isSetIdentify()) {
        this.identify = other.identify;
      }
      if (other.isSetFromTime()) {
        this.fromTime = other.fromTime;
      }
      if (other.isSetToTime()) {
        this.toTime = other.toTime;
      }
    }

    public fromToTimeData_args deepCopy() {
      return new fromToTimeData_args(this);
    }

    @Override
    public void clear() {
      this.identify = null;
      this.fromTime = null;
      this.toTime = null;
    }

    public java.lang.String getIdentify() {
      return this.identify;
    }

    public fromToTimeData_args setIdentify(java.lang.String identify) {
      this.identify = identify;
      return this;
    }

    public void unsetIdentify() {
      this.identify = null;
    }

    /** Returns true if field identify is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentify() {
      return this.identify != null;
    }

    public void setIdentifyIsSet(boolean value) {
      if (!value) {
        this.identify = null;
      }
    }

    public java.lang.String getFromTime() {
      return this.fromTime;
    }

    public fromToTimeData_args setFromTime(java.lang.String fromTime) {
      this.fromTime = fromTime;
      return this;
    }

    public void unsetFromTime() {
      this.fromTime = null;
    }

    /** Returns true if field fromTime is set (has been assigned a value) and false otherwise */
    public boolean isSetFromTime() {
      return this.fromTime != null;
    }

    public void setFromTimeIsSet(boolean value) {
      if (!value) {
        this.fromTime = null;
      }
    }

    public java.lang.String getToTime() {
      return this.toTime;
    }

    public fromToTimeData_args setToTime(java.lang.String toTime) {
      this.toTime = toTime;
      return this;
    }

    public void unsetToTime() {
      this.toTime = null;
    }

    /** Returns true if field toTime is set (has been assigned a value) and false otherwise */
    public boolean isSetToTime() {
      return this.toTime != null;
    }

    public void setToTimeIsSet(boolean value) {
      if (!value) {
        this.toTime = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IDENTIFY:
        if (value == null) {
          unsetIdentify();
        } else {
          setIdentify((java.lang.String)value);
        }
        break;

      case FROM_TIME:
        if (value == null) {
          unsetFromTime();
        } else {
          setFromTime((java.lang.String)value);
        }
        break;

      case TO_TIME:
        if (value == null) {
          unsetToTime();
        } else {
          setToTime((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IDENTIFY:
        return getIdentify();

      case FROM_TIME:
        return getFromTime();

      case TO_TIME:
        return getToTime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IDENTIFY:
        return isSetIdentify();
      case FROM_TIME:
        return isSetFromTime();
      case TO_TIME:
        return isSetToTime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fromToTimeData_args)
        return this.equals((fromToTimeData_args)that);
      return false;
    }

    public boolean equals(fromToTimeData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_identify = true && this.isSetIdentify();
      boolean that_present_identify = true && that.isSetIdentify();
      if (this_present_identify || that_present_identify) {
        if (!(this_present_identify && that_present_identify))
          return false;
        if (!this.identify.equals(that.identify))
          return false;
      }

      boolean this_present_fromTime = true && this.isSetFromTime();
      boolean that_present_fromTime = true && that.isSetFromTime();
      if (this_present_fromTime || that_present_fromTime) {
        if (!(this_present_fromTime && that_present_fromTime))
          return false;
        if (!this.fromTime.equals(that.fromTime))
          return false;
      }

      boolean this_present_toTime = true && this.isSetToTime();
      boolean that_present_toTime = true && that.isSetToTime();
      if (this_present_toTime || that_present_toTime) {
        if (!(this_present_toTime && that_present_toTime))
          return false;
        if (!this.toTime.equals(that.toTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIdentify()) ? 131071 : 524287);
      if (isSetIdentify())
        hashCode = hashCode * 8191 + identify.hashCode();

      hashCode = hashCode * 8191 + ((isSetFromTime()) ? 131071 : 524287);
      if (isSetFromTime())
        hashCode = hashCode * 8191 + fromTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetToTime()) ? 131071 : 524287);
      if (isSetToTime())
        hashCode = hashCode * 8191 + toTime.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fromToTimeData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdentify()).compareTo(other.isSetIdentify());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentify()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identify, other.identify);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromTime()).compareTo(other.isSetFromTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTime, other.fromTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetToTime()).compareTo(other.isSetToTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTime, other.toTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fromToTimeData_args(");
      boolean first = true;

      sb.append("identify:");
      if (this.identify == null) {
        sb.append("null");
      } else {
        sb.append(this.identify);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromTime:");
      if (this.fromTime == null) {
        sb.append("null");
      } else {
        sb.append(this.fromTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("toTime:");
      if (this.toTime == null) {
        sb.append("null");
      } else {
        sb.append(this.toTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fromToTimeData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fromToTimeData_argsStandardScheme getScheme() {
        return new fromToTimeData_argsStandardScheme();
      }
    }

    private static class fromToTimeData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fromToTimeData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fromToTimeData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDENTIFY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identify = iprot.readString();
                struct.setIdentifyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fromTime = iprot.readString();
                struct.setFromTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TO_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.toTime = iprot.readString();
                struct.setToTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fromToTimeData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.identify != null) {
          oprot.writeFieldBegin(IDENTIFY_FIELD_DESC);
          oprot.writeString(struct.identify);
          oprot.writeFieldEnd();
        }
        if (struct.fromTime != null) {
          oprot.writeFieldBegin(FROM_TIME_FIELD_DESC);
          oprot.writeString(struct.fromTime);
          oprot.writeFieldEnd();
        }
        if (struct.toTime != null) {
          oprot.writeFieldBegin(TO_TIME_FIELD_DESC);
          oprot.writeString(struct.toTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fromToTimeData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fromToTimeData_argsTupleScheme getScheme() {
        return new fromToTimeData_argsTupleScheme();
      }
    }

    private static class fromToTimeData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fromToTimeData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fromToTimeData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdentify()) {
          optionals.set(0);
        }
        if (struct.isSetFromTime()) {
          optionals.set(1);
        }
        if (struct.isSetToTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIdentify()) {
          oprot.writeString(struct.identify);
        }
        if (struct.isSetFromTime()) {
          oprot.writeString(struct.fromTime);
        }
        if (struct.isSetToTime()) {
          oprot.writeString(struct.toTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fromToTimeData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.identify = iprot.readString();
          struct.setIdentifyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromTime = iprot.readString();
          struct.setFromTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.toTime = iprot.readString();
          struct.setToTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fromToTimeData_result implements org.apache.thrift.TBase<fromToTimeData_result, fromToTimeData_result._Fields>, java.io.Serializable, Cloneable, Comparable<fromToTimeData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fromToTimeData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fromToTimeData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fromToTimeData_resultTupleSchemeFactory();

    public java.util.List<DataInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fromToTimeData_result.class, metaDataMap);
    }

    public fromToTimeData_result() {
    }

    public fromToTimeData_result(
      java.util.List<DataInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fromToTimeData_result(fromToTimeData_result other) {
      if (other.isSetSuccess()) {
        java.util.List<DataInfo> __this__success = new java.util.ArrayList<DataInfo>(other.success.size());
        for (DataInfo other_element : other.success) {
          __this__success.add(new DataInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public fromToTimeData_result deepCopy() {
      return new fromToTimeData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DataInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DataInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<DataInfo>();
      }
      this.success.add(elem);
    }

    public java.util.List<DataInfo> getSuccess() {
      return this.success;
    }

    public fromToTimeData_result setSuccess(java.util.List<DataInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<DataInfo>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fromToTimeData_result)
        return this.equals((fromToTimeData_result)that);
      return false;
    }

    public boolean equals(fromToTimeData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fromToTimeData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fromToTimeData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fromToTimeData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fromToTimeData_resultStandardScheme getScheme() {
        return new fromToTimeData_resultStandardScheme();
      }
    }

    private static class fromToTimeData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fromToTimeData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fromToTimeData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<DataInfo>(_list16.size);
                  DataInfo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new DataInfo();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fromToTimeData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DataInfo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fromToTimeData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fromToTimeData_resultTupleScheme getScheme() {
        return new fromToTimeData_resultTupleScheme();
      }
    }

    private static class fromToTimeData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fromToTimeData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fromToTimeData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DataInfo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fromToTimeData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<DataInfo>(_list21.size);
            DataInfo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new DataInfo();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

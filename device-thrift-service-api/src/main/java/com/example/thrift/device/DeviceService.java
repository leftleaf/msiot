/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.thrift.device;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-16")
public class DeviceService {

  public interface Iface {

    public DeviceInfo getDeviceById(int id, java.lang.String belong) throws org.apache.thrift.TException;

    public DeviceInfo getDeviceByName(java.lang.String deviceName, java.lang.String belong) throws org.apache.thrift.TException;

    public java.util.List<DeviceInfo> getDevices(java.lang.String belong) throws org.apache.thrift.TException;

    public void updateDeviceInfo(DeviceInfo deviceInfo) throws org.apache.thrift.TException;

    public void addDeviceInfo(DeviceInfo deviceInfo) throws org.apache.thrift.TException;

    public void deleteDevice(java.lang.String deviceName, java.lang.String belong) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getDeviceById(int id, java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<DeviceInfo> resultHandler) throws org.apache.thrift.TException;

    public void getDeviceByName(java.lang.String deviceName, java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<DeviceInfo> resultHandler) throws org.apache.thrift.TException;

    public void getDevices(java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DeviceInfo>> resultHandler) throws org.apache.thrift.TException;

    public void updateDeviceInfo(DeviceInfo deviceInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void addDeviceInfo(DeviceInfo deviceInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deleteDevice(java.lang.String deviceName, java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public DeviceInfo getDeviceById(int id, java.lang.String belong) throws org.apache.thrift.TException
    {
      send_getDeviceById(id, belong);
      return recv_getDeviceById();
    }

    public void send_getDeviceById(int id, java.lang.String belong) throws org.apache.thrift.TException
    {
      getDeviceById_args args = new getDeviceById_args();
      args.setId(id);
      args.setBelong(belong);
      sendBase("getDeviceById", args);
    }

    public DeviceInfo recv_getDeviceById() throws org.apache.thrift.TException
    {
      getDeviceById_result result = new getDeviceById_result();
      receiveBase(result, "getDeviceById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDeviceById failed: unknown result");
    }

    public DeviceInfo getDeviceByName(java.lang.String deviceName, java.lang.String belong) throws org.apache.thrift.TException
    {
      send_getDeviceByName(deviceName, belong);
      return recv_getDeviceByName();
    }

    public void send_getDeviceByName(java.lang.String deviceName, java.lang.String belong) throws org.apache.thrift.TException
    {
      getDeviceByName_args args = new getDeviceByName_args();
      args.setDeviceName(deviceName);
      args.setBelong(belong);
      sendBase("getDeviceByName", args);
    }

    public DeviceInfo recv_getDeviceByName() throws org.apache.thrift.TException
    {
      getDeviceByName_result result = new getDeviceByName_result();
      receiveBase(result, "getDeviceByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDeviceByName failed: unknown result");
    }

    public java.util.List<DeviceInfo> getDevices(java.lang.String belong) throws org.apache.thrift.TException
    {
      send_getDevices(belong);
      return recv_getDevices();
    }

    public void send_getDevices(java.lang.String belong) throws org.apache.thrift.TException
    {
      getDevices_args args = new getDevices_args();
      args.setBelong(belong);
      sendBase("getDevices", args);
    }

    public java.util.List<DeviceInfo> recv_getDevices() throws org.apache.thrift.TException
    {
      getDevices_result result = new getDevices_result();
      receiveBase(result, "getDevices");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDevices failed: unknown result");
    }

    public void updateDeviceInfo(DeviceInfo deviceInfo) throws org.apache.thrift.TException
    {
      send_updateDeviceInfo(deviceInfo);
      recv_updateDeviceInfo();
    }

    public void send_updateDeviceInfo(DeviceInfo deviceInfo) throws org.apache.thrift.TException
    {
      updateDeviceInfo_args args = new updateDeviceInfo_args();
      args.setDeviceInfo(deviceInfo);
      sendBase("updateDeviceInfo", args);
    }

    public void recv_updateDeviceInfo() throws org.apache.thrift.TException
    {
      updateDeviceInfo_result result = new updateDeviceInfo_result();
      receiveBase(result, "updateDeviceInfo");
      return;
    }

    public void addDeviceInfo(DeviceInfo deviceInfo) throws org.apache.thrift.TException
    {
      send_addDeviceInfo(deviceInfo);
      recv_addDeviceInfo();
    }

    public void send_addDeviceInfo(DeviceInfo deviceInfo) throws org.apache.thrift.TException
    {
      addDeviceInfo_args args = new addDeviceInfo_args();
      args.setDeviceInfo(deviceInfo);
      sendBase("addDeviceInfo", args);
    }

    public void recv_addDeviceInfo() throws org.apache.thrift.TException
    {
      addDeviceInfo_result result = new addDeviceInfo_result();
      receiveBase(result, "addDeviceInfo");
      return;
    }

    public void deleteDevice(java.lang.String deviceName, java.lang.String belong) throws org.apache.thrift.TException
    {
      send_deleteDevice(deviceName, belong);
      recv_deleteDevice();
    }

    public void send_deleteDevice(java.lang.String deviceName, java.lang.String belong) throws org.apache.thrift.TException
    {
      deleteDevice_args args = new deleteDevice_args();
      args.setDeviceName(deviceName);
      args.setBelong(belong);
      sendBase("deleteDevice", args);
    }

    public void recv_deleteDevice() throws org.apache.thrift.TException
    {
      deleteDevice_result result = new deleteDevice_result();
      receiveBase(result, "deleteDevice");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getDeviceById(int id, java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<DeviceInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDeviceById_call method_call = new getDeviceById_call(id, belong, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDeviceById_call extends org.apache.thrift.async.TAsyncMethodCall<DeviceInfo> {
      private int id;
      private java.lang.String belong;
      public getDeviceById_call(int id, java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<DeviceInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.belong = belong;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDeviceById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDeviceById_args args = new getDeviceById_args();
        args.setId(id);
        args.setBelong(belong);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DeviceInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDeviceById();
      }
    }

    public void getDeviceByName(java.lang.String deviceName, java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<DeviceInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDeviceByName_call method_call = new getDeviceByName_call(deviceName, belong, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDeviceByName_call extends org.apache.thrift.async.TAsyncMethodCall<DeviceInfo> {
      private java.lang.String deviceName;
      private java.lang.String belong;
      public getDeviceByName_call(java.lang.String deviceName, java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<DeviceInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceName = deviceName;
        this.belong = belong;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDeviceByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDeviceByName_args args = new getDeviceByName_args();
        args.setDeviceName(deviceName);
        args.setBelong(belong);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DeviceInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDeviceByName();
      }
    }

    public void getDevices(java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DeviceInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDevices_call method_call = new getDevices_call(belong, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDevices_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<DeviceInfo>> {
      private java.lang.String belong;
      public getDevices_call(java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DeviceInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.belong = belong;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDevices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDevices_args args = new getDevices_args();
        args.setBelong(belong);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<DeviceInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDevices();
      }
    }

    public void updateDeviceInfo(DeviceInfo deviceInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDeviceInfo_call method_call = new updateDeviceInfo_call(deviceInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDeviceInfo_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private DeviceInfo deviceInfo;
      public updateDeviceInfo_call(DeviceInfo deviceInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceInfo = deviceInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDeviceInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDeviceInfo_args args = new updateDeviceInfo_args();
        args.setDeviceInfo(deviceInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void addDeviceInfo(DeviceInfo deviceInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addDeviceInfo_call method_call = new addDeviceInfo_call(deviceInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addDeviceInfo_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private DeviceInfo deviceInfo;
      public addDeviceInfo_call(DeviceInfo deviceInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceInfo = deviceInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addDeviceInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addDeviceInfo_args args = new addDeviceInfo_args();
        args.setDeviceInfo(deviceInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deleteDevice(java.lang.String deviceName, java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteDevice_call method_call = new deleteDevice_call(deviceName, belong, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteDevice_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String deviceName;
      private java.lang.String belong;
      public deleteDevice_call(java.lang.String deviceName, java.lang.String belong, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceName = deviceName;
        this.belong = belong;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteDevice_args args = new deleteDevice_args();
        args.setDeviceName(deviceName);
        args.setBelong(belong);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getDeviceById", new getDeviceById());
      processMap.put("getDeviceByName", new getDeviceByName());
      processMap.put("getDevices", new getDevices());
      processMap.put("updateDeviceInfo", new updateDeviceInfo());
      processMap.put("addDeviceInfo", new addDeviceInfo());
      processMap.put("deleteDevice", new deleteDevice());
      return processMap;
    }

    public static class getDeviceById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDeviceById_args> {
      public getDeviceById() {
        super("getDeviceById");
      }

      public getDeviceById_args getEmptyArgsInstance() {
        return new getDeviceById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDeviceById_result getResult(I iface, getDeviceById_args args) throws org.apache.thrift.TException {
        getDeviceById_result result = new getDeviceById_result();
        result.success = iface.getDeviceById(args.id, args.belong);
        return result;
      }
    }

    public static class getDeviceByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDeviceByName_args> {
      public getDeviceByName() {
        super("getDeviceByName");
      }

      public getDeviceByName_args getEmptyArgsInstance() {
        return new getDeviceByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDeviceByName_result getResult(I iface, getDeviceByName_args args) throws org.apache.thrift.TException {
        getDeviceByName_result result = new getDeviceByName_result();
        result.success = iface.getDeviceByName(args.deviceName, args.belong);
        return result;
      }
    }

    public static class getDevices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDevices_args> {
      public getDevices() {
        super("getDevices");
      }

      public getDevices_args getEmptyArgsInstance() {
        return new getDevices_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDevices_result getResult(I iface, getDevices_args args) throws org.apache.thrift.TException {
        getDevices_result result = new getDevices_result();
        result.success = iface.getDevices(args.belong);
        return result;
      }
    }

    public static class updateDeviceInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDeviceInfo_args> {
      public updateDeviceInfo() {
        super("updateDeviceInfo");
      }

      public updateDeviceInfo_args getEmptyArgsInstance() {
        return new updateDeviceInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateDeviceInfo_result getResult(I iface, updateDeviceInfo_args args) throws org.apache.thrift.TException {
        updateDeviceInfo_result result = new updateDeviceInfo_result();
        iface.updateDeviceInfo(args.deviceInfo);
        return result;
      }
    }

    public static class addDeviceInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addDeviceInfo_args> {
      public addDeviceInfo() {
        super("addDeviceInfo");
      }

      public addDeviceInfo_args getEmptyArgsInstance() {
        return new addDeviceInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addDeviceInfo_result getResult(I iface, addDeviceInfo_args args) throws org.apache.thrift.TException {
        addDeviceInfo_result result = new addDeviceInfo_result();
        iface.addDeviceInfo(args.deviceInfo);
        return result;
      }
    }

    public static class deleteDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteDevice_args> {
      public deleteDevice() {
        super("deleteDevice");
      }

      public deleteDevice_args getEmptyArgsInstance() {
        return new deleteDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deleteDevice_result getResult(I iface, deleteDevice_args args) throws org.apache.thrift.TException {
        deleteDevice_result result = new deleteDevice_result();
        iface.deleteDevice(args.deviceName, args.belong);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getDeviceById", new getDeviceById());
      processMap.put("getDeviceByName", new getDeviceByName());
      processMap.put("getDevices", new getDevices());
      processMap.put("updateDeviceInfo", new updateDeviceInfo());
      processMap.put("addDeviceInfo", new addDeviceInfo());
      processMap.put("deleteDevice", new deleteDevice());
      return processMap;
    }

    public static class getDeviceById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDeviceById_args, DeviceInfo> {
      public getDeviceById() {
        super("getDeviceById");
      }

      public getDeviceById_args getEmptyArgsInstance() {
        return new getDeviceById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<DeviceInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DeviceInfo>() { 
          public void onComplete(DeviceInfo o) {
            getDeviceById_result result = new getDeviceById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDeviceById_result result = new getDeviceById_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDeviceById_args args, org.apache.thrift.async.AsyncMethodCallback<DeviceInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getDeviceById(args.id, args.belong,resultHandler);
      }
    }

    public static class getDeviceByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDeviceByName_args, DeviceInfo> {
      public getDeviceByName() {
        super("getDeviceByName");
      }

      public getDeviceByName_args getEmptyArgsInstance() {
        return new getDeviceByName_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<DeviceInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DeviceInfo>() { 
          public void onComplete(DeviceInfo o) {
            getDeviceByName_result result = new getDeviceByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDeviceByName_result result = new getDeviceByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDeviceByName_args args, org.apache.thrift.async.AsyncMethodCallback<DeviceInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getDeviceByName(args.deviceName, args.belong,resultHandler);
      }
    }

    public static class getDevices<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDevices_args, java.util.List<DeviceInfo>> {
      public getDevices() {
        super("getDevices");
      }

      public getDevices_args getEmptyArgsInstance() {
        return new getDevices_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<DeviceInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<DeviceInfo>>() { 
          public void onComplete(java.util.List<DeviceInfo> o) {
            getDevices_result result = new getDevices_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDevices_result result = new getDevices_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDevices_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DeviceInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.getDevices(args.belong,resultHandler);
      }
    }

    public static class updateDeviceInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateDeviceInfo_args, Void> {
      public updateDeviceInfo() {
        super("updateDeviceInfo");
      }

      public updateDeviceInfo_args getEmptyArgsInstance() {
        return new updateDeviceInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateDeviceInfo_result result = new updateDeviceInfo_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateDeviceInfo_result result = new updateDeviceInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateDeviceInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateDeviceInfo(args.deviceInfo,resultHandler);
      }
    }

    public static class addDeviceInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addDeviceInfo_args, Void> {
      public addDeviceInfo() {
        super("addDeviceInfo");
      }

      public addDeviceInfo_args getEmptyArgsInstance() {
        return new addDeviceInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addDeviceInfo_result result = new addDeviceInfo_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addDeviceInfo_result result = new addDeviceInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addDeviceInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addDeviceInfo(args.deviceInfo,resultHandler);
      }
    }

    public static class deleteDevice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteDevice_args, Void> {
      public deleteDevice() {
        super("deleteDevice");
      }

      public deleteDevice_args getEmptyArgsInstance() {
        return new deleteDevice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteDevice_result result = new deleteDevice_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteDevice_result result = new deleteDevice_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteDevice_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteDevice(args.deviceName, args.belong,resultHandler);
      }
    }

  }

  public static class getDeviceById_args implements org.apache.thrift.TBase<getDeviceById_args, getDeviceById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDeviceById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDeviceById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BELONG_FIELD_DESC = new org.apache.thrift.protocol.TField("belong", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDeviceById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDeviceById_argsTupleSchemeFactory();

    public int id; // required
    public java.lang.String belong; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      BELONG((short)2, "belong");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // BELONG
            return BELONG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BELONG, new org.apache.thrift.meta_data.FieldMetaData("belong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDeviceById_args.class, metaDataMap);
    }

    public getDeviceById_args() {
    }

    public getDeviceById_args(
      int id,
      java.lang.String belong)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.belong = belong;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDeviceById_args(getDeviceById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetBelong()) {
        this.belong = other.belong;
      }
    }

    public getDeviceById_args deepCopy() {
      return new getDeviceById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.belong = null;
    }

    public int getId() {
      return this.id;
    }

    public getDeviceById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public java.lang.String getBelong() {
      return this.belong;
    }

    public getDeviceById_args setBelong(java.lang.String belong) {
      this.belong = belong;
      return this;
    }

    public void unsetBelong() {
      this.belong = null;
    }

    /** Returns true if field belong is set (has been assigned a value) and false otherwise */
    public boolean isSetBelong() {
      return this.belong != null;
    }

    public void setBelongIsSet(boolean value) {
      if (!value) {
        this.belong = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      case BELONG:
        if (value == null) {
          unsetBelong();
        } else {
          setBelong((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case BELONG:
        return getBelong();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case BELONG:
        return isSetBelong();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDeviceById_args)
        return this.equals((getDeviceById_args)that);
      return false;
    }

    public boolean equals(getDeviceById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_belong = true && this.isSetBelong();
      boolean that_present_belong = true && that.isSetBelong();
      if (this_present_belong || that_present_belong) {
        if (!(this_present_belong && that_present_belong))
          return false;
        if (!this.belong.equals(that.belong))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      hashCode = hashCode * 8191 + ((isSetBelong()) ? 131071 : 524287);
      if (isSetBelong())
        hashCode = hashCode * 8191 + belong.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDeviceById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBelong()).compareTo(other.isSetBelong());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBelong()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.belong, other.belong);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDeviceById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("belong:");
      if (this.belong == null) {
        sb.append("null");
      } else {
        sb.append(this.belong);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDeviceById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceById_argsStandardScheme getScheme() {
        return new getDeviceById_argsStandardScheme();
      }
    }

    private static class getDeviceById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDeviceById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDeviceById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BELONG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.belong = iprot.readString();
                struct.setBelongIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDeviceById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.belong != null) {
          oprot.writeFieldBegin(BELONG_FIELD_DESC);
          oprot.writeString(struct.belong);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDeviceById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceById_argsTupleScheme getScheme() {
        return new getDeviceById_argsTupleScheme();
      }
    }

    private static class getDeviceById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDeviceById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDeviceById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetBelong()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetBelong()) {
          oprot.writeString(struct.belong);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDeviceById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.belong = iprot.readString();
          struct.setBelongIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDeviceById_result implements org.apache.thrift.TBase<getDeviceById_result, getDeviceById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDeviceById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDeviceById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDeviceById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDeviceById_resultTupleSchemeFactory();

    public DeviceInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDeviceById_result.class, metaDataMap);
    }

    public getDeviceById_result() {
    }

    public getDeviceById_result(
      DeviceInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDeviceById_result(getDeviceById_result other) {
      if (other.isSetSuccess()) {
        this.success = new DeviceInfo(other.success);
      }
    }

    public getDeviceById_result deepCopy() {
      return new getDeviceById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public DeviceInfo getSuccess() {
      return this.success;
    }

    public getDeviceById_result setSuccess(DeviceInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DeviceInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDeviceById_result)
        return this.equals((getDeviceById_result)that);
      return false;
    }

    public boolean equals(getDeviceById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDeviceById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDeviceById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDeviceById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceById_resultStandardScheme getScheme() {
        return new getDeviceById_resultStandardScheme();
      }
    }

    private static class getDeviceById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDeviceById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDeviceById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DeviceInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDeviceById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDeviceById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceById_resultTupleScheme getScheme() {
        return new getDeviceById_resultTupleScheme();
      }
    }

    private static class getDeviceById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDeviceById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDeviceById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDeviceById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DeviceInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDeviceByName_args implements org.apache.thrift.TBase<getDeviceByName_args, getDeviceByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDeviceByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDeviceByName_args");

    private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BELONG_FIELD_DESC = new org.apache.thrift.protocol.TField("belong", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDeviceByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDeviceByName_argsTupleSchemeFactory();

    public java.lang.String deviceName; // required
    public java.lang.String belong; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_NAME((short)1, "deviceName"),
      BELONG((short)2, "belong");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_NAME
            return DEVICE_NAME;
          case 2: // BELONG
            return BELONG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BELONG, new org.apache.thrift.meta_data.FieldMetaData("belong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDeviceByName_args.class, metaDataMap);
    }

    public getDeviceByName_args() {
    }

    public getDeviceByName_args(
      java.lang.String deviceName,
      java.lang.String belong)
    {
      this();
      this.deviceName = deviceName;
      this.belong = belong;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDeviceByName_args(getDeviceByName_args other) {
      if (other.isSetDeviceName()) {
        this.deviceName = other.deviceName;
      }
      if (other.isSetBelong()) {
        this.belong = other.belong;
      }
    }

    public getDeviceByName_args deepCopy() {
      return new getDeviceByName_args(this);
    }

    @Override
    public void clear() {
      this.deviceName = null;
      this.belong = null;
    }

    public java.lang.String getDeviceName() {
      return this.deviceName;
    }

    public getDeviceByName_args setDeviceName(java.lang.String deviceName) {
      this.deviceName = deviceName;
      return this;
    }

    public void unsetDeviceName() {
      this.deviceName = null;
    }

    /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceName() {
      return this.deviceName != null;
    }

    public void setDeviceNameIsSet(boolean value) {
      if (!value) {
        this.deviceName = null;
      }
    }

    public java.lang.String getBelong() {
      return this.belong;
    }

    public getDeviceByName_args setBelong(java.lang.String belong) {
      this.belong = belong;
      return this;
    }

    public void unsetBelong() {
      this.belong = null;
    }

    /** Returns true if field belong is set (has been assigned a value) and false otherwise */
    public boolean isSetBelong() {
      return this.belong != null;
    }

    public void setBelongIsSet(boolean value) {
      if (!value) {
        this.belong = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEVICE_NAME:
        if (value == null) {
          unsetDeviceName();
        } else {
          setDeviceName((java.lang.String)value);
        }
        break;

      case BELONG:
        if (value == null) {
          unsetBelong();
        } else {
          setBelong((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_NAME:
        return getDeviceName();

      case BELONG:
        return getBelong();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_NAME:
        return isSetDeviceName();
      case BELONG:
        return isSetBelong();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDeviceByName_args)
        return this.equals((getDeviceByName_args)that);
      return false;
    }

    public boolean equals(getDeviceByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_deviceName = true && this.isSetDeviceName();
      boolean that_present_deviceName = true && that.isSetDeviceName();
      if (this_present_deviceName || that_present_deviceName) {
        if (!(this_present_deviceName && that_present_deviceName))
          return false;
        if (!this.deviceName.equals(that.deviceName))
          return false;
      }

      boolean this_present_belong = true && this.isSetBelong();
      boolean that_present_belong = true && that.isSetBelong();
      if (this_present_belong || that_present_belong) {
        if (!(this_present_belong && that_present_belong))
          return false;
        if (!this.belong.equals(that.belong))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDeviceName()) ? 131071 : 524287);
      if (isSetDeviceName())
        hashCode = hashCode * 8191 + deviceName.hashCode();

      hashCode = hashCode * 8191 + ((isSetBelong()) ? 131071 : 524287);
      if (isSetBelong())
        hashCode = hashCode * 8191 + belong.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDeviceByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBelong()).compareTo(other.isSetBelong());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBelong()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.belong, other.belong);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDeviceByName_args(");
      boolean first = true;

      sb.append("deviceName:");
      if (this.deviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("belong:");
      if (this.belong == null) {
        sb.append("null");
      } else {
        sb.append(this.belong);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDeviceByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceByName_argsStandardScheme getScheme() {
        return new getDeviceByName_argsStandardScheme();
      }
    }

    private static class getDeviceByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDeviceByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDeviceByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceName = iprot.readString();
                struct.setDeviceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BELONG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.belong = iprot.readString();
                struct.setBelongIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDeviceByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceName != null) {
          oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.deviceName);
          oprot.writeFieldEnd();
        }
        if (struct.belong != null) {
          oprot.writeFieldBegin(BELONG_FIELD_DESC);
          oprot.writeString(struct.belong);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDeviceByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceByName_argsTupleScheme getScheme() {
        return new getDeviceByName_argsTupleScheme();
      }
    }

    private static class getDeviceByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDeviceByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDeviceByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDeviceName()) {
          optionals.set(0);
        }
        if (struct.isSetBelong()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDeviceName()) {
          oprot.writeString(struct.deviceName);
        }
        if (struct.isSetBelong()) {
          oprot.writeString(struct.belong);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDeviceByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.deviceName = iprot.readString();
          struct.setDeviceNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.belong = iprot.readString();
          struct.setBelongIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDeviceByName_result implements org.apache.thrift.TBase<getDeviceByName_result, getDeviceByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDeviceByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDeviceByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDeviceByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDeviceByName_resultTupleSchemeFactory();

    public DeviceInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDeviceByName_result.class, metaDataMap);
    }

    public getDeviceByName_result() {
    }

    public getDeviceByName_result(
      DeviceInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDeviceByName_result(getDeviceByName_result other) {
      if (other.isSetSuccess()) {
        this.success = new DeviceInfo(other.success);
      }
    }

    public getDeviceByName_result deepCopy() {
      return new getDeviceByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public DeviceInfo getSuccess() {
      return this.success;
    }

    public getDeviceByName_result setSuccess(DeviceInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DeviceInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDeviceByName_result)
        return this.equals((getDeviceByName_result)that);
      return false;
    }

    public boolean equals(getDeviceByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDeviceByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDeviceByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDeviceByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceByName_resultStandardScheme getScheme() {
        return new getDeviceByName_resultStandardScheme();
      }
    }

    private static class getDeviceByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDeviceByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDeviceByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DeviceInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDeviceByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDeviceByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceByName_resultTupleScheme getScheme() {
        return new getDeviceByName_resultTupleScheme();
      }
    }

    private static class getDeviceByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDeviceByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDeviceByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDeviceByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DeviceInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDevices_args implements org.apache.thrift.TBase<getDevices_args, getDevices_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDevices_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDevices_args");

    private static final org.apache.thrift.protocol.TField BELONG_FIELD_DESC = new org.apache.thrift.protocol.TField("belong", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDevices_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDevices_argsTupleSchemeFactory();

    public java.lang.String belong; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BELONG((short)1, "belong");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BELONG
            return BELONG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BELONG, new org.apache.thrift.meta_data.FieldMetaData("belong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDevices_args.class, metaDataMap);
    }

    public getDevices_args() {
    }

    public getDevices_args(
      java.lang.String belong)
    {
      this();
      this.belong = belong;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDevices_args(getDevices_args other) {
      if (other.isSetBelong()) {
        this.belong = other.belong;
      }
    }

    public getDevices_args deepCopy() {
      return new getDevices_args(this);
    }

    @Override
    public void clear() {
      this.belong = null;
    }

    public java.lang.String getBelong() {
      return this.belong;
    }

    public getDevices_args setBelong(java.lang.String belong) {
      this.belong = belong;
      return this;
    }

    public void unsetBelong() {
      this.belong = null;
    }

    /** Returns true if field belong is set (has been assigned a value) and false otherwise */
    public boolean isSetBelong() {
      return this.belong != null;
    }

    public void setBelongIsSet(boolean value) {
      if (!value) {
        this.belong = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BELONG:
        if (value == null) {
          unsetBelong();
        } else {
          setBelong((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BELONG:
        return getBelong();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BELONG:
        return isSetBelong();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDevices_args)
        return this.equals((getDevices_args)that);
      return false;
    }

    public boolean equals(getDevices_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_belong = true && this.isSetBelong();
      boolean that_present_belong = true && that.isSetBelong();
      if (this_present_belong || that_present_belong) {
        if (!(this_present_belong && that_present_belong))
          return false;
        if (!this.belong.equals(that.belong))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBelong()) ? 131071 : 524287);
      if (isSetBelong())
        hashCode = hashCode * 8191 + belong.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDevices_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBelong()).compareTo(other.isSetBelong());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBelong()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.belong, other.belong);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDevices_args(");
      boolean first = true;

      sb.append("belong:");
      if (this.belong == null) {
        sb.append("null");
      } else {
        sb.append(this.belong);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDevices_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDevices_argsStandardScheme getScheme() {
        return new getDevices_argsStandardScheme();
      }
    }

    private static class getDevices_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDevices_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDevices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BELONG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.belong = iprot.readString();
                struct.setBelongIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDevices_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.belong != null) {
          oprot.writeFieldBegin(BELONG_FIELD_DESC);
          oprot.writeString(struct.belong);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDevices_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDevices_argsTupleScheme getScheme() {
        return new getDevices_argsTupleScheme();
      }
    }

    private static class getDevices_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDevices_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDevices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBelong()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBelong()) {
          oprot.writeString(struct.belong);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDevices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.belong = iprot.readString();
          struct.setBelongIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDevices_result implements org.apache.thrift.TBase<getDevices_result, getDevices_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDevices_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDevices_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDevices_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDevices_resultTupleSchemeFactory();

    public java.util.List<DeviceInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDevices_result.class, metaDataMap);
    }

    public getDevices_result() {
    }

    public getDevices_result(
      java.util.List<DeviceInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDevices_result(getDevices_result other) {
      if (other.isSetSuccess()) {
        java.util.List<DeviceInfo> __this__success = new java.util.ArrayList<DeviceInfo>(other.success.size());
        for (DeviceInfo other_element : other.success) {
          __this__success.add(new DeviceInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDevices_result deepCopy() {
      return new getDevices_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DeviceInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DeviceInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<DeviceInfo>();
      }
      this.success.add(elem);
    }

    public java.util.List<DeviceInfo> getSuccess() {
      return this.success;
    }

    public getDevices_result setSuccess(java.util.List<DeviceInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<DeviceInfo>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDevices_result)
        return this.equals((getDevices_result)that);
      return false;
    }

    public boolean equals(getDevices_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDevices_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDevices_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDevices_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDevices_resultStandardScheme getScheme() {
        return new getDevices_resultStandardScheme();
      }
    }

    private static class getDevices_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDevices_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDevices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<DeviceInfo>(_list0.size);
                  DeviceInfo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new DeviceInfo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDevices_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DeviceInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDevices_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDevices_resultTupleScheme getScheme() {
        return new getDevices_resultTupleScheme();
      }
    }

    private static class getDevices_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDevices_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDevices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DeviceInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDevices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<DeviceInfo>(_list5.size);
            DeviceInfo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new DeviceInfo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateDeviceInfo_args implements org.apache.thrift.TBase<updateDeviceInfo_args, updateDeviceInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateDeviceInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDeviceInfo_args");

    private static final org.apache.thrift.protocol.TField DEVICE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateDeviceInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateDeviceInfo_argsTupleSchemeFactory();

    public DeviceInfo deviceInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_INFO((short)1, "deviceInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_INFO
            return DEVICE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_INFO, new org.apache.thrift.meta_data.FieldMetaData("deviceInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDeviceInfo_args.class, metaDataMap);
    }

    public updateDeviceInfo_args() {
    }

    public updateDeviceInfo_args(
      DeviceInfo deviceInfo)
    {
      this();
      this.deviceInfo = deviceInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDeviceInfo_args(updateDeviceInfo_args other) {
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
    }

    public updateDeviceInfo_args deepCopy() {
      return new updateDeviceInfo_args(this);
    }

    @Override
    public void clear() {
      this.deviceInfo = null;
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public updateDeviceInfo_args setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
      return this;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEVICE_INFO:
        if (value == null) {
          unsetDeviceInfo();
        } else {
          setDeviceInfo((DeviceInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_INFO:
        return getDeviceInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_INFO:
        return isSetDeviceInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDeviceInfo_args)
        return this.equals((updateDeviceInfo_args)that);
      return false;
    }

    public boolean equals(updateDeviceInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDeviceInfo()) ? 131071 : 524287);
      if (isSetDeviceInfo())
        hashCode = hashCode * 8191 + deviceInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateDeviceInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDeviceInfo()).compareTo(other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceInfo, other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateDeviceInfo_args(");
      boolean first = true;

      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (deviceInfo != null) {
        deviceInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDeviceInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDeviceInfo_argsStandardScheme getScheme() {
        return new updateDeviceInfo_argsStandardScheme();
      }
    }

    private static class updateDeviceInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateDeviceInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDeviceInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deviceInfo = new DeviceInfo();
                struct.deviceInfo.read(iprot);
                struct.setDeviceInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDeviceInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceInfo != null) {
          oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
          struct.deviceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDeviceInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDeviceInfo_argsTupleScheme getScheme() {
        return new updateDeviceInfo_argsTupleScheme();
      }
    }

    private static class updateDeviceInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateDeviceInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDeviceInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDeviceInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceInfo()) {
          struct.deviceInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDeviceInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceInfo = new DeviceInfo();
          struct.deviceInfo.read(iprot);
          struct.setDeviceInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateDeviceInfo_result implements org.apache.thrift.TBase<updateDeviceInfo_result, updateDeviceInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateDeviceInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDeviceInfo_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateDeviceInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateDeviceInfo_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDeviceInfo_result.class, metaDataMap);
    }

    public updateDeviceInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDeviceInfo_result(updateDeviceInfo_result other) {
    }

    public updateDeviceInfo_result deepCopy() {
      return new updateDeviceInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDeviceInfo_result)
        return this.equals((updateDeviceInfo_result)that);
      return false;
    }

    public boolean equals(updateDeviceInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(updateDeviceInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateDeviceInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDeviceInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDeviceInfo_resultStandardScheme getScheme() {
        return new updateDeviceInfo_resultStandardScheme();
      }
    }

    private static class updateDeviceInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateDeviceInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDeviceInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDeviceInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDeviceInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDeviceInfo_resultTupleScheme getScheme() {
        return new updateDeviceInfo_resultTupleScheme();
      }
    }

    private static class updateDeviceInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateDeviceInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDeviceInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDeviceInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addDeviceInfo_args implements org.apache.thrift.TBase<addDeviceInfo_args, addDeviceInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addDeviceInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDeviceInfo_args");

    private static final org.apache.thrift.protocol.TField DEVICE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addDeviceInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addDeviceInfo_argsTupleSchemeFactory();

    public DeviceInfo deviceInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_INFO((short)1, "deviceInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_INFO
            return DEVICE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_INFO, new org.apache.thrift.meta_data.FieldMetaData("deviceInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDeviceInfo_args.class, metaDataMap);
    }

    public addDeviceInfo_args() {
    }

    public addDeviceInfo_args(
      DeviceInfo deviceInfo)
    {
      this();
      this.deviceInfo = deviceInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDeviceInfo_args(addDeviceInfo_args other) {
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
    }

    public addDeviceInfo_args deepCopy() {
      return new addDeviceInfo_args(this);
    }

    @Override
    public void clear() {
      this.deviceInfo = null;
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public addDeviceInfo_args setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
      return this;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEVICE_INFO:
        if (value == null) {
          unsetDeviceInfo();
        } else {
          setDeviceInfo((DeviceInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_INFO:
        return getDeviceInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_INFO:
        return isSetDeviceInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addDeviceInfo_args)
        return this.equals((addDeviceInfo_args)that);
      return false;
    }

    public boolean equals(addDeviceInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDeviceInfo()) ? 131071 : 524287);
      if (isSetDeviceInfo())
        hashCode = hashCode * 8191 + deviceInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addDeviceInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDeviceInfo()).compareTo(other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceInfo, other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addDeviceInfo_args(");
      boolean first = true;

      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (deviceInfo != null) {
        deviceInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDeviceInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addDeviceInfo_argsStandardScheme getScheme() {
        return new addDeviceInfo_argsStandardScheme();
      }
    }

    private static class addDeviceInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addDeviceInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDeviceInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deviceInfo = new DeviceInfo();
                struct.deviceInfo.read(iprot);
                struct.setDeviceInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDeviceInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceInfo != null) {
          oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
          struct.deviceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDeviceInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addDeviceInfo_argsTupleScheme getScheme() {
        return new addDeviceInfo_argsTupleScheme();
      }
    }

    private static class addDeviceInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addDeviceInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDeviceInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDeviceInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceInfo()) {
          struct.deviceInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDeviceInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceInfo = new DeviceInfo();
          struct.deviceInfo.read(iprot);
          struct.setDeviceInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addDeviceInfo_result implements org.apache.thrift.TBase<addDeviceInfo_result, addDeviceInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addDeviceInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDeviceInfo_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addDeviceInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addDeviceInfo_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDeviceInfo_result.class, metaDataMap);
    }

    public addDeviceInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDeviceInfo_result(addDeviceInfo_result other) {
    }

    public addDeviceInfo_result deepCopy() {
      return new addDeviceInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addDeviceInfo_result)
        return this.equals((addDeviceInfo_result)that);
      return false;
    }

    public boolean equals(addDeviceInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addDeviceInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addDeviceInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDeviceInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addDeviceInfo_resultStandardScheme getScheme() {
        return new addDeviceInfo_resultStandardScheme();
      }
    }

    private static class addDeviceInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addDeviceInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDeviceInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDeviceInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDeviceInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addDeviceInfo_resultTupleScheme getScheme() {
        return new addDeviceInfo_resultTupleScheme();
      }
    }

    private static class addDeviceInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addDeviceInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDeviceInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDeviceInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteDevice_args implements org.apache.thrift.TBase<deleteDevice_args, deleteDevice_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteDevice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BELONG_FIELD_DESC = new org.apache.thrift.protocol.TField("belong", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteDevice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteDevice_argsTupleSchemeFactory();

    public java.lang.String deviceName; // required
    public java.lang.String belong; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_NAME((short)1, "deviceName"),
      BELONG((short)2, "belong");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_NAME
            return DEVICE_NAME;
          case 2: // BELONG
            return BELONG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BELONG, new org.apache.thrift.meta_data.FieldMetaData("belong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDevice_args.class, metaDataMap);
    }

    public deleteDevice_args() {
    }

    public deleteDevice_args(
      java.lang.String deviceName,
      java.lang.String belong)
    {
      this();
      this.deviceName = deviceName;
      this.belong = belong;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDevice_args(deleteDevice_args other) {
      if (other.isSetDeviceName()) {
        this.deviceName = other.deviceName;
      }
      if (other.isSetBelong()) {
        this.belong = other.belong;
      }
    }

    public deleteDevice_args deepCopy() {
      return new deleteDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceName = null;
      this.belong = null;
    }

    public java.lang.String getDeviceName() {
      return this.deviceName;
    }

    public deleteDevice_args setDeviceName(java.lang.String deviceName) {
      this.deviceName = deviceName;
      return this;
    }

    public void unsetDeviceName() {
      this.deviceName = null;
    }

    /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceName() {
      return this.deviceName != null;
    }

    public void setDeviceNameIsSet(boolean value) {
      if (!value) {
        this.deviceName = null;
      }
    }

    public java.lang.String getBelong() {
      return this.belong;
    }

    public deleteDevice_args setBelong(java.lang.String belong) {
      this.belong = belong;
      return this;
    }

    public void unsetBelong() {
      this.belong = null;
    }

    /** Returns true if field belong is set (has been assigned a value) and false otherwise */
    public boolean isSetBelong() {
      return this.belong != null;
    }

    public void setBelongIsSet(boolean value) {
      if (!value) {
        this.belong = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEVICE_NAME:
        if (value == null) {
          unsetDeviceName();
        } else {
          setDeviceName((java.lang.String)value);
        }
        break;

      case BELONG:
        if (value == null) {
          unsetBelong();
        } else {
          setBelong((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_NAME:
        return getDeviceName();

      case BELONG:
        return getBelong();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_NAME:
        return isSetDeviceName();
      case BELONG:
        return isSetBelong();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDevice_args)
        return this.equals((deleteDevice_args)that);
      return false;
    }

    public boolean equals(deleteDevice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_deviceName = true && this.isSetDeviceName();
      boolean that_present_deviceName = true && that.isSetDeviceName();
      if (this_present_deviceName || that_present_deviceName) {
        if (!(this_present_deviceName && that_present_deviceName))
          return false;
        if (!this.deviceName.equals(that.deviceName))
          return false;
      }

      boolean this_present_belong = true && this.isSetBelong();
      boolean that_present_belong = true && that.isSetBelong();
      if (this_present_belong || that_present_belong) {
        if (!(this_present_belong && that_present_belong))
          return false;
        if (!this.belong.equals(that.belong))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDeviceName()) ? 131071 : 524287);
      if (isSetDeviceName())
        hashCode = hashCode * 8191 + deviceName.hashCode();

      hashCode = hashCode * 8191 + ((isSetBelong()) ? 131071 : 524287);
      if (isSetBelong())
        hashCode = hashCode * 8191 + belong.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBelong()).compareTo(other.isSetBelong());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBelong()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.belong, other.belong);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteDevice_args(");
      boolean first = true;

      sb.append("deviceName:");
      if (this.deviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("belong:");
      if (this.belong == null) {
        sb.append("null");
      } else {
        sb.append(this.belong);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDevice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteDevice_argsStandardScheme getScheme() {
        return new deleteDevice_argsStandardScheme();
      }
    }

    private static class deleteDevice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceName = iprot.readString();
                struct.setDeviceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BELONG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.belong = iprot.readString();
                struct.setBelongIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceName != null) {
          oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.deviceName);
          oprot.writeFieldEnd();
        }
        if (struct.belong != null) {
          oprot.writeFieldBegin(BELONG_FIELD_DESC);
          oprot.writeString(struct.belong);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDevice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteDevice_argsTupleScheme getScheme() {
        return new deleteDevice_argsTupleScheme();
      }
    }

    private static class deleteDevice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDeviceName()) {
          optionals.set(0);
        }
        if (struct.isSetBelong()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDeviceName()) {
          oprot.writeString(struct.deviceName);
        }
        if (struct.isSetBelong()) {
          oprot.writeString(struct.belong);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.deviceName = iprot.readString();
          struct.setDeviceNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.belong = iprot.readString();
          struct.setBelongIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteDevice_result implements org.apache.thrift.TBase<deleteDevice_result, deleteDevice_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteDevice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDevice_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteDevice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteDevice_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDevice_result.class, metaDataMap);
    }

    public deleteDevice_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDevice_result(deleteDevice_result other) {
    }

    public deleteDevice_result deepCopy() {
      return new deleteDevice_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDevice_result)
        return this.equals((deleteDevice_result)that);
      return false;
    }

    public boolean equals(deleteDevice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deleteDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteDevice_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDevice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteDevice_resultStandardScheme getScheme() {
        return new deleteDevice_resultStandardScheme();
      }
    }

    private static class deleteDevice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDevice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteDevice_resultTupleScheme getScheme() {
        return new deleteDevice_resultTupleScheme();
      }
    }

    private static class deleteDevice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
